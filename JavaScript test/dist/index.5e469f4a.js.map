{"mappings":"AAAA,IAAI,QAAQ,GAAG;AAAC,KAAC;AAAE,KAAC;AAAE,KAAC;AAAE,KAAC;AAAE,KAAC;AAAE,KAAC;AAAE,KAAC;AAAE,KAAC;CAAC,AAAC;AACxC,MAAM,MAAM,GAAG,EAAE,AAAC;AAClB,MAAM,aAAa,GAAG,SAAU,CAAC,EAAE;IACjC,MAAM,QAAQ,GAAG,EAAE,AAAC;IACpB,MAAM,YAAY,GAAG,SAAU,OAAO,EAAE;QACtC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,GAAK;YACtB,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,GAAG,CAAC,EAC3B,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;SAE1B,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,SAAU,OAAO,EAAE,EAAE,AAAC;QACtC,qBAAqB;QACrB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KACvB,AAAC;IACF,YAAY,CAAC,QAAQ,CAAC,CAAC;CACxB,AAAC;AACF,aAAa,CAAC,GAAG,CAAC,CAAC","sources":["scripts.js"],"sourcesContent":["let dividers = [2, 3, 4, 5, 6, 7, 8, 9];\r\nconst primes = [];\r\nconst primeDividers = function (n) {\r\n  const filtered = [];\r\n  const findDividers = function (numbers) {\r\n    numbers.filter((num) => {\r\n      if (Number.isInteger(n / num)) {\r\n        filtered.push(n / num);\r\n      }\r\n    });\r\n\r\n    const recheck = function (numbers) {};\r\n    // recheck(dividers);\r\n    console.log(filtered);\r\n  };\r\n  findDividers(dividers);\r\n};\r\nprimeDividers(180);\r\n"],"names":[],"version":3,"file":"index.5e469f4a.js.map","sourceRoot":"/__parcel_source_root/"}